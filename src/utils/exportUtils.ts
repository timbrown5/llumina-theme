import type { Base24Colors, FlavorKey, ThemeParams, AccentColorKey } from '../types/index.ts';

const getColorDescription = (key: string): string => {
  const descriptions: Record<string, string> = {
    base00: 'Primary Background',
    base01: 'Secondary Background',
    base02: 'Selection Background',
    base03: 'Comments',
    base04: 'Secondary Foreground (Low Contrast)',
    base05: 'Primary Foreground (Main Text)',
    base06: 'Emphasized Foreground',
    base07: 'Strong Emphasis (High Contrast)',
    base08: 'Red',
    base09: 'Orange',
    base0A: 'Yellow',
    base0B: 'Green',
    base0C: 'Cyan',
    base0D: 'Blue',
    base0E: 'Purple',
    base0F: 'Pink',
    base10: 'Muted Red',
    base11: 'Muted Orange',
    base12: 'Muted Yellow',
    base13: 'Muted Green',
    base14: 'Muted Cyan',
    base15: 'Muted Blue',
    base16: 'Muted Purple',
    base17: 'Muted Pink',
  };
  return descriptions[key] || key;
};

export const createNvimTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => `-- ${themeName} (${flavor} flavor)
-- Generated by Lumina Theme Generator

local colors = {
${Object.entries(colors)
  .map(([key, value]) => `  ${key} = "${value}",`)
  .join('\n')}
}

local theme = {
  Normal = { fg = colors.base05, bg = colors.base00 },
  NormalFloat = { fg = colors.base05, bg = colors.base01 },
  Comment = { fg = colors.base03, italic = true },

  Constant = { fg = colors.base09 },
  String = { fg = colors.base0B },
  Character = { fg = colors.base0B },
  Number = { fg = colors.base09 },
  Boolean = { fg = colors.base09 },
  Float = { fg = colors.base09 },

  Identifier = { fg = colors.base08 },
  Function = { fg = colors.base0D },

  Statement = { fg = colors.base0E },
  Conditional = { fg = colors.base0E },
  Repeat = { fg = colors.base0E },
  Label = { fg = colors.base0A },
  Operator = { fg = colors.base05 },
  Keyword = { fg = colors.base0E, bold = true },
  Exception = { fg = colors.base08 },

  Type = { fg = colors.base0A },
  StorageClass = { fg = colors.base0A },
  Structure = { fg = colors.base0E },

  Special = { fg = colors.base0C },
  SpecialChar = { fg = colors.base0F },
  Tag = { fg = colors.base0A },
  Delimiter = { fg = colors.base0F },

  CursorLine = { bg = colors.base01 },
  Visual = { bg = colors.base02 },
  Search = { fg = colors.base00, bg = colors.base0A },
  LineNr = { fg = colors.base03 },
  StatusLine = { fg = colors.base04, bg = colors.base02 },

  ErrorMsg = { fg = colors.base08 },
  WarningMsg = { fg = colors.base09 },
  MoreMsg = { fg = colors.base0B },

  DiffAdd = { fg = colors.base0B, bg = colors.base00 },
  DiffChange = { fg = colors.base0A, bg = colors.base00 },
  DiffDelete = { fg = colors.base08, bg = colors.base00 },
  DiffText = { fg = colors.base0D, bg = colors.base00 },
}

for group, opts in pairs(theme) do
  vim.api.nvim_set_hl(0, group, opts)
end

return colors`;

export const createBase24Json = (colors: Base24Colors, themeName: string): string =>
  JSON.stringify(
    {
      name: themeName,
      scheme: 'base24',
      author: 'Lumina Theme Generator',
      colors: colors,
    },
    null,
    2
  );

export const createStylixTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => {
  const nixThemeName = themeName.toLowerCase().replace(/[^a-z0-9]/g, '-');
  const isLight = colors.base00 > colors.base05;

  return `# ${themeName} (${flavor} flavor) - Stylix Theme
# Generated by Lumina Theme Generator

{
  stylix = {
    enable = true;

    base16Scheme = {
${Object.entries(colors)
  .map(([key, value]) => `      ${key} = "${value.slice(1)}"; # ${getColorDescription(key)}`)
  .join('\n')}

      scheme = "${nixThemeName}";
      author = "Lumina Theme Generator";
    };

    polarity = "${isLight ? 'light' : 'dark'}";

    targets = {
      alacritty.enable = true;
      kitty.enable = true;
      neovim.enable = true;
      firefox.enable = true;
    };
  };
}`;
};

// Helper function to calculate final hue for a color including adjustments
const getFinalHueForColor = (
  params: ThemeParams,
  colorKey: AccentColorKey,
  standardOffsets: number[] = [0, 30, 60, 150, 180, 210, 270, 330]
): number => {
  const baseHue = params.accentHue || 0;
  const colorIndex = [
    'base08',
    'base09',
    'base0A',
    'base0B',
    'base0C',
    'base0D',
    'base0E',
    'base0F',
  ].indexOf(colorKey);
  const standardOffset = standardOffsets[colorIndex] || 0;
  const customOffset = params.colorAdjustments?.[colorKey]?.hueOffset ?? 0;

  let finalHue = baseHue + standardOffset + customOffset;
  while (finalHue < 0) finalHue += 360;
  while (finalHue >= 360) finalHue -= 360;

  return Math.round(finalHue);
};

// New function to create theme JSON that matches your /src/themes/ format
export const createThemeJson = (
  params: ThemeParams,
  themeName: string,
  themeTagline: string,
  themeInspirations: string,
  currentFlavor: FlavorKey
): string => {
  // Calculate final hues for all accent colors including user adjustments
  const accentColors = {
    red: { hue: getFinalHueForColor(params, 'base08') },
    orange: { hue: getFinalHueForColor(params, 'base09') },
    yellow: { hue: getFinalHueForColor(params, 'base0A') },
    green: { hue: getFinalHueForColor(params, 'base0B') },
    cyan: { hue: getFinalHueForColor(params, 'base0C') },
    blue: { hue: getFinalHueForColor(params, 'base0D') },
    purple: { hue: getFinalHueForColor(params, 'base0E') },
    pink: { hue: getFinalHueForColor(params, 'base0F') },
  };

  // Create flavors object - use current params for the active flavor
  const flavors = {
    muted: {
      accentHue: currentFlavor === 'muted' ? params.accentHue : 0,
      accentSat: currentFlavor === 'muted' ? params.accentSat : 50,
      accentLight: currentFlavor === 'muted' ? params.accentLight : 65,
      commentLight: currentFlavor === 'muted' ? params.commentLight : 45,
    },
    balanced: {
      accentHue: currentFlavor === 'balanced' ? params.accentHue : 0,
      accentSat: currentFlavor === 'balanced' ? params.accentSat : 70,
      accentLight: currentFlavor === 'balanced' ? params.accentLight : 60,
      commentLight: currentFlavor === 'balanced' ? params.commentLight : 40,
    },
    bold: {
      accentHue: currentFlavor === 'bold' ? params.accentHue : 0,
      accentSat: currentFlavor === 'bold' ? params.accentSat : 85,
      accentLight: currentFlavor === 'bold' ? params.accentLight : 55,
      commentLight: currentFlavor === 'bold' ? params.commentLight : 35,
    },
  };

  const themeDefinition = {
    name: themeName,
    tagline: themeTagline,
    inspirations: themeInspirations,
    bgHue: params.bgHue,
    bgSat: params.bgSat,
    bgLight: params.bgLight,
    accentOffsets: accentColors,
    flavors,
  };

  return JSON.stringify(themeDefinition, null, 2);
};

// Function to create a complete theme package with all variants
export const createCompleteThemeJson = (
  baseParams: ThemeParams,
  themeName: string,
  themeTagline: string,
  themeInspirations: string,
  allFlavorParams: { muted: any; balanced: any; bold: any }
): string => {
  // Calculate final hues for all accent colors including user adjustments
  const accentOffsets = {
    red: { hue: getFinalHueForColor(baseParams, 'base08') },
    orange: { hue: getFinalHueForColor(baseParams, 'base09') },
    yellow: { hue: getFinalHueForColor(baseParams, 'base0A') },
    green: { hue: getFinalHueForColor(baseParams, 'base0B') },
    cyan: { hue: getFinalHueForColor(baseParams, 'base0C') },
    blue: { hue: getFinalHueForColor(baseParams, 'base0D') },
    purple: { hue: getFinalHueForColor(baseParams, 'base0E') },
    pink: { hue: getFinalHueForColor(baseParams, 'base0F') },
  };

  const themeDefinition = {
    name: themeName,
    tagline: themeTagline,
    inspirations: themeInspirations,
    bgHue: baseParams.bgHue,
    bgSat: baseParams.bgSat,
    bgLight: baseParams.bgLight,
    accentOffsets,
    flavors: allFlavorParams,
  };

  return JSON.stringify(themeDefinition, null, 2);
};
