/**
 * Converts theme data into various output formats for different applications.
 *
 * This module serves as the export layer for the Lumina theme system, transforming
 * generated Base24 color schemes into platform-specific formats. It handles the
 * conversion logic and formatting requirements for each target application while
 * maintaining compatibility with existing theme ecosystems.
 *
 * Export formats supported:
 * - Neovim Lua themes with complete highlight group definitions
 * - Base24 JSON for universal editor compatibility
 * - Stylix Nix configuration for system-wide theming
 * - Theme definition files for installable theme packages
 */

import type {
  Base24Colors,
  FlavorKey,
  ThemeParams,
  AccentColorKey,
  ThemeKey,
  BaseTheme,
} from '../types/index.js';
import { Base24 } from '../classes/Base24.js';
import {
  getFinalHue,
  generateColors,
  getThemeOffset,
  getUserAdjustment,
} from '../utils/colorUtils.js';

export const createNvimTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => `-- ${themeName} (${flavor} flavor)
-- Generated by Lumina Theme Generator

local colors = {
${Object.entries(colors)
  .map(([key, value]) => `  ${key} = "${value}",`)
  .join('\n')}
}

local theme = {
  Normal = { fg = colors.base05, bg = colors.base00 },
  NormalFloat = { fg = colors.base05, bg = colors.base01 },
  Comment = { fg = colors.base03, italic = true },

  Constant = { fg = colors.base09 },
  String = { fg = colors.base0B },
  Character = { fg = colors.base0B },
  Number = { fg = colors.base09 },
  Boolean = { fg = colors.base09 },
  Float = { fg = colors.base09 },

  Identifier = { fg = colors.base08 },
  Function = { fg = colors.base0D },

  Statement = { fg = colors.base0E },
  Conditional = { fg = colors.base0E },
  Repeat = { fg = colors.base0E },
  Label = { fg = colors.base0A },
  Operator = { fg = colors.base05 },
  Keyword = { fg = colors.base0E, bold = true },
  Exception = { fg = colors.base08 },

  Type = { fg = colors.base0A },
  StorageClass = { fg = colors.base0A },
  Structure = { fg = colors.base0E },

  Special = { fg = colors.base0C },
  SpecialChar = { fg = colors.base0F },
  Tag = { fg = colors.base0A },
  Delimiter = { fg = colors.base0F },

  CursorLine = { bg = colors.base01 },
  Visual = { bg = colors.base02 },
  Search = { fg = colors.base00, bg = colors.base0A },
  LineNr = { fg = colors.base03 },
  StatusLine = { fg = colors.base04, bg = colors.base02 },

  ErrorMsg = { fg = colors.base08 },
  WarningMsg = { fg = colors.base09 },
  MoreMsg = { fg = colors.base0B },

  DiffAdd = { fg = colors.base0B, bg = colors.base00 },
  DiffChange = { fg = colors.base0A, bg = colors.base00 },
  DiffDelete = { fg = colors.base08, bg = colors.base00 },
  DiffText = { fg = colors.base0D, bg = colors.base00 },
}

for group, opts in pairs(theme) do
  vim.api.nvim_set_hl(0, group, opts)
end

return colors`;

export const createBase24Json = (colors: Base24Colors, themeName: string): string =>
  Base24.createBase24Json(colors, themeName);

export const createStylixTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => {
  const nixThemeName = themeName.toLowerCase().replace(/[^a-z0-9]/g, '-');
  const isLight = colors.base00 > colors.base05;

  return `# ${themeName} (${flavor} flavor) - Stylix Theme
# Generated by Lumina Theme Generator

{
  stylix = {
    enable = true;

    base16Scheme = {
${Object.entries(colors)
  .map(([key, value]) => `      ${key} = "${value.slice(1)}"; # ${Base24.getColorDescription(key)}`)
  .join('\n')}

      scheme = "${nixThemeName}";
      author = "Lumina Theme Generator";
    };

    polarity = "${isLight ? 'light' : 'dark'}";

    targets = {
      alacritty.enable = true;
      kitty.enable = true;
      neovim.enable = true;
      firefox.enable = true;
    };
  };
}`;
};

export const createThemeDefinitionJson = (
  params: ThemeParams,
  themeKey: ThemeKey,
  themeName: string,
  themeTagline: string,
  themeInspirations: string,
  currentFlavor: FlavorKey
): string => {
  const accentColors = {
    red: { hue: getFinalHue(params, 'base08', themeKey) },
    orange: { hue: getFinalHue(params, 'base09', themeKey) },
    yellow: { hue: getFinalHue(params, 'base0A', themeKey) },
    green: { hue: getFinalHue(params, 'base0B', themeKey) },
    cyan: { hue: getFinalHue(params, 'base0C', themeKey) },
    blue: { hue: getFinalHue(params, 'base0D', themeKey) },
    purple: { hue: getFinalHue(params, 'base0E', themeKey) },
    pink: { hue: getFinalHue(params, 'base0F', themeKey) },
  };

  const flavors = {
    muted: {
      accentHue: currentFlavor === 'muted' ? params.accentHue : 0,
      accentSat: currentFlavor === 'muted' ? params.accentSat : 50,
      accentLight: currentFlavor === 'muted' ? params.accentLight : 65,
      commentLight: currentFlavor === 'muted' ? params.commentLight : 45,
    },
    balanced: {
      accentHue: currentFlavor === 'balanced' ? params.accentHue : 0,
      accentSat: currentFlavor === 'balanced' ? params.accentSat : 70,
      accentLight: currentFlavor === 'balanced' ? params.accentLight : 60,
      commentLight: currentFlavor === 'balanced' ? params.commentLight : 40,
    },
    bold: {
      accentHue: currentFlavor === 'bold' ? params.accentHue : 0,
      accentSat: currentFlavor === 'bold' ? params.accentSat : 85,
      accentLight: currentFlavor === 'bold' ? params.accentLight : 55,
      commentLight: currentFlavor === 'bold' ? params.commentLight : 35,
    },
  };

  const themeDefinition = {
    name: themeName,
    tagline: themeTagline,
    inspirations: themeInspirations,
    bgHue: params.bgHue,
    bgSat: params.bgSat,
    bgLight: params.bgLight,
    accentOffsets: accentColors,
    flavors,
  };

  return JSON.stringify(themeDefinition, null, 2);
};

export const createThemeParamsJson = (
  params: ThemeParams,
  themeKey: ThemeKey,
  currentFlavor: FlavorKey,
  themeInfo: BaseTheme,
  flavorParams: any
): string => {
  const getFinalOffsetForColor = (colorKey: AccentColorKey): number => {
    const themeOffset = getThemeOffset(themeKey, colorKey);
    const userAdjustment = getUserAdjustment(params, colorKey);
    return themeOffset + userAdjustment;
  };

  const accentOffsets = {
    red: { hue: getFinalOffsetForColor('base08') },
    orange: { hue: getFinalOffsetForColor('base09') },
    yellow: { hue: getFinalOffsetForColor('base0A') },
    green: { hue: getFinalOffsetForColor('base0B') },
    cyan: { hue: getFinalOffsetForColor('base0C') },
    blue: { hue: getFinalOffsetForColor('base0D') },
    purple: { hue: getFinalOffsetForColor('base0E') },
    pink: { hue: getFinalOffsetForColor('base0F') },
  };

  const flavors = {
    muted:
      currentFlavor === 'muted'
        ? {
            accentHue: params.accentHue,
            accentSat: params.accentSat,
            accentLight: params.accentLight,
            commentLight: params.commentLight,
          }
        : flavorParams.muted || {
            accentHue: 0,
            accentSat: 85,
            accentLight: 75,
            commentLight: 55,
          },
    balanced:
      currentFlavor === 'balanced'
        ? {
            accentHue: params.accentHue,
            accentSat: params.accentSat,
            accentLight: params.accentLight,
            commentLight: params.commentLight,
          }
        : flavorParams.balanced || {
            accentHue: 0,
            accentSat: 95,
            accentLight: 60,
            commentLight: 55,
          },
    bold:
      currentFlavor === 'bold'
        ? {
            accentHue: params.accentHue,
            accentSat: params.accentSat,
            accentLight: params.accentLight,
            commentLight: params.commentLight,
          }
        : flavorParams.bold || {
            accentHue: 0,
            accentSat: 100,
            accentLight: 50,
            commentLight: 60,
          },
  };

  const themeDefinition = {
    name: themeInfo.name,
    tagline: themeInfo.tagline,
    inspirations: themeInfo.inspirations,
    bgHue: params.bgHue,
    bgSat: params.bgSat,
    bgLight: params.bgLight,
    accentOffsets,
    flavors,
  };

  return JSON.stringify(themeDefinition, null, 2);
};

export const exportNeovimTheme = (
  params: ThemeParams,
  themeKey: ThemeKey,
  themeName: string,
  flavor: FlavorKey
): string => {
  const colors = generateColors(params, themeKey);
  return createNvimTheme(colors, themeName, flavor);
};

export const exportBase24Theme = (
  params: ThemeParams,
  themeKey: ThemeKey,
  themeName: string
): string => {
  const colors = generateColors(params, themeKey);
  return createBase24Json(colors, themeName);
};

export const exportStylixTheme = (
  params: ThemeParams,
  themeKey: ThemeKey,
  themeName: string,
  flavor: FlavorKey
): string => {
  const colors = generateColors(params, themeKey);
  return createStylixTheme(colors, themeName, flavor);
};

export const exportThemeDefinition = (
  params: ThemeParams,
  themeKey: ThemeKey,
  themeName: string,
  themeTagline: string,
  themeInspirations: string,
  currentFlavor: FlavorKey
): string => {
  return createThemeDefinitionJson(
    params,
    themeKey,
    themeName,
    themeTagline,
    themeInspirations,
    currentFlavor
  );
};

export const exportThemeParams = (
  params: ThemeParams,
  themeKey: ThemeKey,
  currentFlavor: FlavorKey,
  themeInfo: BaseTheme,
  flavorParams: any
): string => {
  return createThemeParamsJson(params, themeKey, currentFlavor, themeInfo, flavorParams);
};

export const createThemeJson = createThemeDefinitionJson;
