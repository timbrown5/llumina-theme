// Token types that map to Base16 colors
export const TOKEN_TYPES = {
  COMMENT: 'base03',
  KEYWORD: 'base0E',
  STRING: 'base0B',
  FUNCTION: 'base0D',
  TYPE: 'base0A',
  NUMBER: 'base09',
  VARIABLE: 'base08',
  OPERATOR: 'base05',
  PREPROCESSOR: 'base0F',

  // Terminal specific
  PROMPT: 'base0A',
  COMMAND: 'base05',
  PATH: 'base0C',
  EXECUTABLE: 'base0B',
  PERMISSIONS: 'base0D',
  GIT_BRANCH: 'base0E',
  GIT_STATUS: 'base0B',
  GIT_MODIFIED: 'base08',
};

// Syntax examples as structured data
export const SYNTAX_EXAMPLES = {
  javascript: {
    title: 'JavaScript - React Hook with Custom State',
    lines: [
      [{ type: 'COMMENT', text: '// JavaScript - React Hook with Custom State', italic: true }],
      [
        { type: 'KEYWORD', text: 'import' },
        { type: 'OPERATOR', text: ' {' },
        { type: 'FUNCTION', text: 'useState' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'FUNCTION', text: 'useEffect' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'FUNCTION', text: 'useCallback' },
        { type: 'OPERATOR', text: '} ' },
        { type: 'KEYWORD', text: 'from' },
        { type: 'STRING', text: " 'react'" },
      ],
      [
        { type: 'KEYWORD', text: 'import' },
        { type: 'VARIABLE', text: ' debounce' },
        { type: 'KEYWORD', text: ' from' },
        { type: 'STRING', text: " 'lodash'" },
      ],
      [], // Empty line
      [
        { type: 'KEYWORD', text: 'const' },
        { type: 'FUNCTION', text: ' useCounter' },
        { type: 'OPERATOR', text: ' = (' },
        { type: 'VARIABLE', text: 'initialValue' },
        { type: 'OPERATOR', text: ' = ' },
        { type: 'NUMBER', text: '0' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'VARIABLE', text: 'step' },
        { type: 'OPERATOR', text: ' = ' },
        { type: 'NUMBER', text: '1' },
        { type: 'OPERATOR', text: ') => {' },
      ],
      [
        { type: 'OPERATOR', text: '  ' },
        { type: 'KEYWORD', text: 'const' },
        { type: 'OPERATOR', text: ' [' },
        { type: 'VARIABLE', text: 'count' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'VARIABLE', text: 'setCount' },
        { type: 'OPERATOR', text: '] = ' },
        { type: 'FUNCTION', text: 'useState' },
        { type: 'OPERATOR', text: '(' },
        { type: 'VARIABLE', text: 'initialValue' },
        { type: 'OPERATOR', text: ')' },
      ],
      [
        { type: 'OPERATOR', text: '  ' },
        { type: 'KEYWORD', text: 'const' },
        { type: 'OPERATOR', text: ' [' },
        { type: 'VARIABLE', text: 'isLoading' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'VARIABLE', text: 'setIsLoading' },
        { type: 'OPERATOR', text: '] = ' },
        { type: 'FUNCTION', text: 'useState' },
        { type: 'OPERATOR', text: '(' },
        { type: 'NUMBER', text: 'false' },
        { type: 'OPERATOR', text: ')' },
      ],
      [], // Empty line
      [
        { type: 'OPERATOR', text: '  ' },
        { type: 'KEYWORD', text: 'const' },
        { type: 'VARIABLE', text: ' increment' },
        { type: 'OPERATOR', text: ' = ' },
        { type: 'FUNCTION', text: 'useCallback' },
        { type: 'OPERATOR', text: '(() => {' },
      ],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'FUNCTION', text: 'setCount' },
        { type: 'OPERATOR', text: '(' },
        { type: 'VARIABLE', text: 'prev' },
        { type: 'OPERATOR', text: ' => ' },
        { type: 'VARIABLE', text: 'prev' },
        { type: 'OPERATOR', text: ' + ' },
        { type: 'VARIABLE', text: 'step' },
        { type: 'OPERATOR', text: ')' },
      ],
      [
        { type: 'OPERATOR', text: '  }, [' },
        { type: 'VARIABLE', text: 'step' },
        { type: 'OPERATOR', text: '])' },
      ],
      [], // Empty line
      [
        { type: 'OPERATOR', text: '  ' },
        { type: 'FUNCTION', text: 'useEffect' },
        { type: 'OPERATOR', text: '(() => {' },
      ],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'KEYWORD', text: 'if' },
        { type: 'OPERATOR', text: ' (' },
        { type: 'VARIABLE', text: 'count' },
        { type: 'OPERATOR', text: ' > ' },
        { type: 'NUMBER', text: '10' },
        { type: 'OPERATOR', text: ') {' },
      ],
      [
        { type: 'OPERATOR', text: '      ' },
        { type: 'VARIABLE', text: 'console' },
        { type: 'OPERATOR', text: '.' },
        { type: 'FUNCTION', text: 'log' },
        { type: 'OPERATOR', text: '(' },
        { type: 'STRING', text: '`High count: ${' },
        { type: 'VARIABLE', text: 'count' },
        { type: 'STRING', text: '}`' },
        { type: 'OPERATOR', text: ')' },
      ],
      [{ type: 'OPERATOR', text: '    }' }],
      [
        { type: 'OPERATOR', text: '  }, [' },
        { type: 'VARIABLE', text: 'count' },
        { type: 'OPERATOR', text: '])' },
      ],
      [], // Empty line
      [
        { type: 'OPERATOR', text: '  ' },
        { type: 'KEYWORD', text: 'return' },
        { type: 'OPERATOR', text: ' { ' },
        { type: 'VARIABLE', text: 'count' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'VARIABLE', text: 'increment' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'VARIABLE', text: 'isLoading' },
        { type: 'OPERATOR', text: ' }' },
      ],
      [{ type: 'OPERATOR', text: '}' }],
    ],
  },

  python: {
    title: 'Python - Advanced Data Processing Pipeline',
    lines: [
      [{ type: 'COMMENT', text: '# Python - Advanced Data Processing Pipeline', italic: true }],
      [
        { type: 'KEYWORD', text: 'import' },
        { type: 'VARIABLE', text: ' pandas' },
        { type: 'KEYWORD', text: ' as' },
        { type: 'VARIABLE', text: ' pd' },
      ],
      [
        { type: 'KEYWORD', text: 'import' },
        { type: 'VARIABLE', text: ' numpy' },
        { type: 'KEYWORD', text: ' as' },
        { type: 'VARIABLE', text: ' np' },
      ],
      [
        { type: 'KEYWORD', text: 'from' },
        { type: 'VARIABLE', text: ' typing' },
        { type: 'KEYWORD', text: ' import' },
        { type: 'TYPE', text: ' List' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'TYPE', text: 'Dict' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'TYPE', text: 'Optional' },
      ],
      [],
      [{ type: 'PREPROCESSOR', text: '@dataclass' }],
      [
        { type: 'KEYWORD', text: 'class' },
        { type: 'TYPE', text: ' DataProcessor' },
        { type: 'OPERATOR', text: ':' },
      ],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'VARIABLE', text: 'threshold' },
        { type: 'OPERATOR', text: ': ' },
        { type: 'TYPE', text: 'float' },
        { type: 'OPERATOR', text: ' = ' },
        { type: 'NUMBER', text: '0.5' },
      ],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'VARIABLE', text: 'batch_size' },
        { type: 'OPERATOR', text: ': ' },
        { type: 'TYPE', text: 'int' },
        { type: 'OPERATOR', text: ' = ' },
        { type: 'NUMBER', text: '1000' },
      ],
      [],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'KEYWORD', text: 'def' },
        { type: 'FUNCTION', text: ' process_batch' },
        { type: 'OPERATOR', text: '(' },
        { type: 'VARIABLE', text: 'self' },
        { type: 'OPERATOR', text: ', ' },
        { type: 'VARIABLE', text: 'data' },
        { type: 'OPERATOR', text: ': ' },
        { type: 'TYPE', text: 'List' },
        { type: 'OPERATOR', text: '[' },
        { type: 'TYPE', text: 'Dict' },
        { type: 'OPERATOR', text: ']):' },
      ],
      [
        { type: 'OPERATOR', text: '        ' },
        { type: 'STRING', text: '"""Process a batch of data with filtering."""' },
      ],
      [
        { type: 'OPERATOR', text: '        ' },
        { type: 'VARIABLE', text: 'df' },
        { type: 'OPERATOR', text: ' = ' },
        { type: 'FUNCTION', text: 'pd.DataFrame' },
        { type: 'OPERATOR', text: '(' },
        { type: 'VARIABLE', text: 'data' },
        { type: 'OPERATOR', text: ')' },
      ],
      [
        { type: 'OPERATOR', text: '        ' },
        { type: 'KEYWORD', text: 'return' },
        { type: 'VARIABLE', text: ' df' },
        { type: 'OPERATOR', text: '[' },
        { type: 'VARIABLE', text: 'df' },
        { type: 'OPERATOR', text: '[' },
        { type: 'STRING', text: "'score'" },
        { type: 'OPERATOR', text: '] > ' },
        { type: 'VARIABLE', text: 'self' },
        { type: 'OPERATOR', text: '.' },
        { type: 'VARIABLE', text: 'threshold' },
        { type: 'OPERATOR', text: ']' },
      ],
    ],
  },

  cpp: {
    title: 'C++ - Generic Container with Smart Pointers',
    lines: [
      [{ type: 'COMMENT', text: '// C++ - Generic Container with Smart Pointers', italic: true }],
      [
        { type: 'KEYWORD', text: '#include' },
        { type: 'STRING', text: ' <iostream>' },
      ],
      [
        { type: 'KEYWORD', text: '#include' },
        { type: 'STRING', text: ' <vector>' },
      ],
      [
        { type: 'KEYWORD', text: '#include' },
        { type: 'STRING', text: ' <memory>' },
      ],
      [],
      [
        { type: 'KEYWORD', text: 'template' },
        { type: 'OPERATOR', text: '<' },
        { type: 'KEYWORD', text: 'typename' },
        { type: 'TYPE', text: ' T' },
        { type: 'OPERATOR', text: '>' },
      ],
      [
        { type: 'KEYWORD', text: 'class' },
        { type: 'TYPE', text: ' DataContainer' },
        { type: 'OPERATOR', text: ' {' },
      ],
      [
        { type: 'KEYWORD', text: 'private' },
        { type: 'OPERATOR', text: ':' },
      ],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'VARIABLE', text: 'std' },
        { type: 'OPERATOR', text: '::' },
        { type: 'TYPE', text: 'vector' },
        { type: 'OPERATOR', text: '<' },
        { type: 'VARIABLE', text: 'std' },
        { type: 'OPERATOR', text: '::' },
        { type: 'TYPE', text: 'unique_ptr' },
        { type: 'OPERATOR', text: '<' },
        { type: 'TYPE', text: 'T' },
        { type: 'OPERATOR', text: '>> ' },
        { type: 'VARIABLE', text: 'data_' },
        { type: 'OPERATOR', text: ';' },
      ],
      [],
      [
        { type: 'KEYWORD', text: 'public' },
        { type: 'OPERATOR', text: ':' },
      ],
      [
        { type: 'OPERATOR', text: '    ' },
        { type: 'TYPE', text: 'void' },
        { type: 'FUNCTION', text: ' emplace' },
        { type: 'OPERATOR', text: '(' },
        { type: 'TYPE', text: 'T' },
        { type: 'OPERATOR', text: '&& ' },
        { type: 'VARIABLE', text: 'item' },
        { type: 'OPERATOR', text: ') {' },
      ],
      [
        { type: 'OPERATOR', text: '        ' },
        { type: 'VARIABLE', text: 'data_' },
        { type: 'OPERATOR', text: '.' },
        { type: 'FUNCTION', text: 'push_back' },
        { type: 'OPERATOR', text: '(' },
        { type: 'VARIABLE', text: 'std' },
        { type: 'OPERATOR', text: '::' },
        { type: 'FUNCTION', text: 'make_unique' },
        { type: 'OPERATOR', text: '<' },
        { type: 'TYPE', text: 'T' },
        { type: 'OPERATOR', text: '>(' },
        { type: 'VARIABLE', text: 'std' },
        { type: 'OPERATOR', text: '::' },
        { type: 'FUNCTION', text: 'move' },
        { type: 'OPERATOR', text: '(' },
        { type: 'VARIABLE', text: 'item' },
        { type: 'OPERATOR', text: ')));' },
      ],
      [{ type: 'OPERATOR', text: '    }' }],
      [{ type: 'OPERATOR', text: '};' }],
    ],
  },

  terminal: {
    title: 'Terminal - Git Workflow',
    lines: [
      [
        { type: 'PROMPT', text: '❯' },
        { type: 'COMMAND', text: ' ls -la' },
      ],
      [
        { type: 'PERMISSIONS', text: 'drwxr-xr-x' },
        { type: 'COMMAND', text: ' 3 user staff    96 Dec 15 10:30 ' },
        { type: 'PATH', text: 'projects/' },
      ],
      [
        { type: 'PERMISSIONS', text: '-rw-r--r--' },
        { type: 'COMMAND', text: ' 1 user staff  1.2K Dec 15 09:15 README.md' },
      ],
      [
        { type: 'PERMISSIONS', text: '-rwxr-xr-x' },
        { type: 'COMMAND', text: ' 1 user staff  2.1K Dec 15 08:45 ' },
        { type: 'EXECUTABLE', text: 'build.sh' },
      ],
      [],
      [
        { type: 'PROMPT', text: '❯' },
        { type: 'COMMAND', text: ' git status' },
      ],
      [
        { type: 'GIT_STATUS', text: 'On branch ' },
        { type: 'GIT_BRANCH', text: 'main' },
      ],
      [{ type: 'GIT_STATUS', text: 'Changes not staged for commit:' }],
      [
        { type: 'GIT_MODIFIED', text: '        modified:   ' },
        { type: 'COMMAND', text: 'src/components/ThemeGenerator.tsx' },
      ],
      [
        { type: 'GIT_MODIFIED', text: '        modified:   ' },
        { type: 'COMMAND', text: 'src/utils/colorUtils.ts' },
      ],
      [],
      [
        { type: 'PROMPT', text: '❯' },
        { type: 'COMMAND', text: ' nvim init.lua' },
      ],
      [{ type: 'COMMENT', text: '-- Opening Neovim with your new theme!', italic: true }],
    ],
  },
};
