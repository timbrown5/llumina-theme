import { RAW_THEME_DATA } from '../constants/index.ts';
import type { Base24Colors, ThemeParams, ThemeKey, FlavorKey } from '../types/index.ts';

interface ExportTemplate {
  generate: (
    colors: Base24Colors,
    themeName: string,
    flavor?: FlavorKey,
    params?: ThemeParams,
    activeTheme?: ThemeKey
  ) => string;
}

const EXPORT_TEMPLATES: Record<string, ExportTemplate> = {
  nvim: {
    generate: (colors, themeName, flavor) => `-- ${themeName} (${flavor} flavor)
-- Generated by Lumina Theme Generator

local colors = {
${Object.entries(colors)
  .map(([key, value]) => `  ${key} = "${value}",`)
  .join('\n')}
}

local theme = {
  Normal = { fg = colors.base05, bg = colors.base00 },
  NormalFloat = { fg = colors.base05, bg = colors.base01 },
  Comment = { fg = colors.base03, italic = true },

  Constant = { fg = colors.base09 },
  String = { fg = colors.base0B },
  Character = { fg = colors.base0B },
  Number = { fg = colors.base09 },
  Boolean = { fg = colors.base09 },
  Float = { fg = colors.base09 },

  Identifier = { fg = colors.base08 },
  Function = { fg = colors.base0D },

  Statement = { fg = colors.base0E },
  Conditional = { fg = colors.base0E },
  Repeat = { fg = colors.base0E },
  Label = { fg = colors.base0A },
  Operator = { fg = colors.base05 },
  Keyword = { fg = colors.base0E, bold = true },
  Exception = { fg = colors.base08 },

  Type = { fg = colors.base0A },
  StorageClass = { fg = colors.base0A },
  Structure = { fg = colors.base0E },

  Special = { fg = colors.base0C },
  SpecialChar = { fg = colors.base0F },
  Tag = { fg = colors.base0A },
  Delimiter = { fg = colors.base0F },

  CursorLine = { bg = colors.base01 },
  Visual = { bg = colors.base02 },
  Search = { fg = colors.base00, bg = colors.base0A },
  LineNr = { fg = colors.base03 },
  StatusLine = { fg = colors.base04, bg = colors.base02 },

  ErrorMsg = { fg = colors.base08 },
  WarningMsg = { fg = colors.base09 },
  MoreMsg = { fg = colors.base0B },

  DiffAdd = { fg = colors.base0B, bg = colors.base00 },
  DiffChange = { fg = colors.base0A, bg = colors.base00 },
  DiffDelete = { fg = colors.base08, bg = colors.base00 },
  DiffText = { fg = colors.base0D, bg = colors.base00 },
}

for group, opts in pairs(theme) do
  vim.api.nvim_set_hl(0, group, opts)
end

return colors`,
  },

  base24: {
    generate: (colors, themeName) =>
      JSON.stringify(
        {
          name: themeName,
          scheme: 'base24',
          author: 'Lumina Theme Generator',
          colors: colors,
        },
        null,
        2
      ),
  },

  stylix: {
    generate: (colors, themeName, flavor) => {
      const nixThemeName = themeName.toLowerCase().replace(/[^a-z0-9]/g, '-');
      const isLight = colors.base00 > colors.base05;

      return `# ${themeName} (${flavor} flavor) - Stylix Theme
# Generated by Lumina Theme Generator

{
  stylix = {
    enable = true;

    base16Scheme = {
${Object.entries(colors)
  .map(([key, value]) => `      ${key} = "${value.slice(1)}"; # ${getColorDescription(key)}`)
  .join('\n')}

      scheme = "${nixThemeName}";
      author = "Lumina Theme Generator";
    };

    polarity = "${isLight ? 'light' : 'dark'}";

    targets = {
      alacritty.enable = true;
      kitty.enable = true;
      neovim.enable = true;
      firefox.enable = true;
    };
  };
}`;
    },
  },

  params: {
    generate: (
      colors: Base24Colors,
      themeName: string,
      flavor?: FlavorKey,
      params?: ThemeParams,
      activeTheme?: ThemeKey
    ) => {
      const themeData = JSON.parse(JSON.stringify(RAW_THEME_DATA));
      const currentTheme = themeData[activeTheme!];

      if (currentTheme && params) {
        currentTheme.bgHue = params.bgHue;
        currentTheme.bgSat = params.bgSat;
        currentTheme.bgLight = params.bgLight;

        if (currentTheme.flavors && currentTheme.flavors[flavor!]) {
          currentTheme.flavors[flavor!] = {
            accentHue: params.accentHue,
            accentSat: params.accentSat,
            accentLight: params.accentLight,
            commentLight: params.commentLight,
          };
        }
      }

      return `const themeData = ${JSON.stringify(themeData, null, 2)} as const;`;
    },
  },
};

const getColorDescription = (key: string): string => {
  const descriptions: Record<string, string> = {
    base00: 'Background',
    base01: 'Alt Background',
    base02: 'Selection',
    base03: 'Comments',
    base04: 'Dark Foreground',
    base05: 'Foreground',
    base06: 'Light Foreground',
    base07: 'Light Background',
    base08: 'Red',
    base09: 'Orange',
    base0A: 'Yellow',
    base0B: 'Green',
    base0C: 'Cyan',
    base0D: 'Blue',
    base0E: 'Purple',
    base0F: 'Pink',
    base10: 'Muted Red',
    base11: 'Muted Orange',
    base12: 'Muted Yellow',
    base13: 'Muted Green',
    base14: 'Muted Cyan',
    base15: 'Muted Blue',
    base16: 'Muted Purple',
    base17: 'Muted Pink',
  };
  return descriptions[key] || key;
};

export const createNvimTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => EXPORT_TEMPLATES.nvim.generate(colors, themeName, flavor);

export const createBase24Json = (colors: Base24Colors, themeName: string): string =>
  EXPORT_TEMPLATES.base24.generate(colors, themeName);

export const createStylixTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => EXPORT_TEMPLATES.stylix.generate(colors, themeName, flavor);

export const createThemeParams = (
  activeTheme: ThemeKey,
  flavor: FlavorKey,
  params: ThemeParams,
  colors: Base24Colors
): string => EXPORT_TEMPLATES.params.generate(colors, '', flavor, params, activeTheme);
