import { THEMES, FLAVORS } from '../constants/index.ts';
import type { Base24Colors, ThemeParams, ThemeKey, FlavorKey } from '../types/index.ts';

export const createNvimTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => `-- ${themeName} (${flavor} flavor)
-- Generated by Lumina Theme Generator

local colors = {
${Object.entries(colors)
  .map(([key, value]) => `  ${key} = "${value}",`)
  .join('\n')}
}

local theme = {
  Normal = { fg = colors.base05, bg = colors.base00 },
  NormalFloat = { fg = colors.base05, bg = colors.base01 },
  Comment = { fg = colors.base03, italic = true },
  
  Keyword = { fg = colors.base0E, bold = true },
  String = { fg = colors.base0B },
  Character = { fg = colors.base0B },
  Number = { fg = colors.base09 },
  Boolean = { fg = colors.base09 },
  Float = { fg = colors.base09 },
  Function = { fg = colors.base0D },
  Identifier = { fg = colors.base08 },
  Statement = { fg = colors.base0E },
  Conditional = { fg = colors.base0E },
  Repeat = { fg = colors.base0E },
  Label = { fg = colors.base0A },
  Operator = { fg = colors.base05 },
  Exception = { fg = colors.base08 },
  PreProc = { fg = colors.base0A },
  Include = { fg = colors.base0D },
  Define = { fg = colors.base0E },
  Macro = { fg = colors.base08 },
  Type = { fg = colors.base0A },
  StorageClass = { fg = colors.base0A },
  Structure = { fg = colors.base0E },
  Typedef = { fg = colors.base0A },
  Special = { fg = colors.base0C },
  SpecialChar = { fg = colors.base0F },
  Tag = { fg = colors.base0A },
  Delimiter = { fg = colors.base0F },
  SpecialComment = { fg = colors.base0C },
  Debug = { fg = colors.base08 },
  Constant = { fg = colors.base09 },
  
  CursorLine = { bg = colors.base01 },
  CursorColumn = { bg = colors.base01 },
  ColorColumn = { bg = colors.base01 },
  Visual = { bg = colors.base02 },
  VisualNOS = { bg = colors.base02 },
  Search = { fg = colors.base00, bg = colors.base0A },
  IncSearch = { fg = colors.base01, bg = colors.base09 },
  LineNr = { fg = colors.base04 },
  CursorLineNr = { fg = colors.base0A },
  MatchParen = { fg = colors.base00, bg = colors.base03 },
  
  StatusLine = { fg = colors.base04, bg = colors.base02 },
  StatusLineNC = { fg = colors.base03, bg = colors.base01 },
  
  ErrorMsg = { fg = colors.base08 },
  WarningMsg = { fg = colors.base09 },
  MoreMsg = { fg = colors.base0B },
  Question = { fg = colors.base0D },
  
  DiffAdd = { fg = colors.base0B, bg = colors.base00 },
  DiffChange = { fg = colors.base0A, bg = colors.base00 },
  DiffDelete = { fg = colors.base08, bg = colors.base00 },
  DiffText = { fg = colors.base0D, bg = colors.base00 },
  
  SpellBad = { undercurl = true, sp = colors.base08 },
  SpellCap = { undercurl = true, sp = colors.base0D },
  SpellLocal = { undercurl = true, sp = colors.base0C },
  SpellRare = { undercurl = true, sp = colors.base0E },
}

for group, opts in pairs(theme) do
  vim.api.nvim_set_hl(0, group, opts)
end

return colors`;

export const createBase24Json = (colors: Base24Colors, themeName: string): string =>
  JSON.stringify(
    {
      name: themeName,
      scheme: 'base24',
      author: 'Lumina Theme Generator',
      colors: colors,
    },
    null,
    2
  );

export const createThemeParams = (
  activeTheme: ThemeKey,
  flavor: FlavorKey,
  params: ThemeParams,
  colors: Base24Colors
): string => {
  // Get all theme base parameters
  const allThemeParams = Object.entries(THEMES).reduce(
    (acc, [themeKey, theme]) => {
      acc[themeKey] = {
        bgHue: theme.bgHue,
        bgSat: theme.bgSat,
        bgLight: theme.bgLight,
        accentHue: theme.accentHue,
        accentSat: theme.accentSat,
        accentLight: theme.accentLight,
        commentLight: theme.commentLight,
      };
      return acc;
    },
    {} as Record<string, ThemeParams>
  );

  // Get all flavor parameters
  const allFlavorParams = Object.entries(FLAVORS).reduce(
    (acc, [themeKey, themeFlavorMap]) => {
      acc[themeKey] = Object.entries(themeFlavorMap).reduce(
        (flavorAcc, [flavorKey, flavorData]) => {
          const [accentHue, accentSat, accentLight, commentLight] = flavorData;
          flavorAcc[flavorKey] = {
            accentHue,
            accentSat,
            accentLight,
            commentLight,
          };
          return flavorAcc;
        },
        {} as Record<string, Partial<ThemeParams>>
      );
      return acc;
    },
    {} as Record<string, Record<string, Partial<ThemeParams>>>
  );

  return JSON.stringify(
    {
      metadata: {
        generatedAt: new Date().toISOString(),
        currentTheme: activeTheme,
        currentFlavor: flavor,
        generator: 'Lumina Theme Generator',
        version: '1.0.0',
      },
      themeBaseParameters: allThemeParams,
      flavorParameters: allFlavorParams,
      currentSliderValues: {
        bgHue: params.bgHue,
        bgSat: params.bgSat,
        bgLight: params.bgLight,
        accentHue: params.accentHue,
        accentSat: params.accentSat,
        accentLight: params.accentLight,
        commentLight: params.commentLight,
      },
      colorGenerationRules: {
        accentHueOffsets: [-30, 30, 60, 120, 180, -60, 0, -90],
        mutedColorFormula: 'accentSat - 25%, accentLight + 10%',
        flavorProgression:
          '+5 saturation, -10 lightness per step (pastel -> normal -> high-contrast)',
      },
    },
    null,
    2
  );
};
