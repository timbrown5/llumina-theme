import { RAW_THEME_DATA } from '../constants/index.ts';
import type { Base24Colors, ThemeParams, ThemeKey, FlavorKey } from '../types/index.ts';

export const createNvimTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => `-- ${themeName} (${flavor} flavor)
-- Generated by Lumina Theme Generator

local colors = {
${Object.entries(colors)
  .map(([key, value]) => `  ${key} = "${value}",`)
  .join('\n')}
}

local theme = {
  Normal = { fg = colors.base05, bg = colors.base00 },
  NormalFloat = { fg = colors.base05, bg = colors.base01 },
  Comment = { fg = colors.base03, italic = true },

  -- Constants
  Constant = { fg = colors.base09 },
  String = { fg = colors.base0B },
  Character = { fg = colors.base0B },
  Number = { fg = colors.base09 },
  Boolean = { fg = colors.base09 },
  Float = { fg = colors.base09 },

  -- Identifiers
  Identifier = { fg = colors.base08 },
  Function = { fg = colors.base0D },

  -- Statements
  Statement = { fg = colors.base0E },
  Conditional = { fg = colors.base0E },
  Repeat = { fg = colors.base0E },
  Label = { fg = colors.base0A },
  Operator = { fg = colors.base05 },
  Keyword = { fg = colors.base0E, bold = true },
  Exception = { fg = colors.base08 },

  -- PreProcessor
  PreProc = { fg = colors.base0A },
  Include = { fg = colors.base0D },
  Define = { fg = colors.base0E },
  Macro = { fg = colors.base08 },
  PreCondit = { fg = colors.base0A },

  -- Types
  Type = { fg = colors.base0A },
  StorageClass = { fg = colors.base0A },
  Structure = { fg = colors.base0E },
  Typedef = { fg = colors.base0A },

  -- Special
  Special = { fg = colors.base0C },
  SpecialChar = { fg = colors.base0F },
  Tag = { fg = colors.base0A },
  Delimiter = { fg = colors.base0F },
  SpecialComment = { fg = colors.base0C },
  Debug = { fg = colors.base08 },

  -- UI Elements
  CursorLine = { bg = colors.base01 },
  CursorColumn = { bg = colors.base01 },
  ColorColumn = { bg = colors.base01 },
  Visual = { bg = colors.base02 },
  VisualNOS = { bg = colors.base02 },
  Search = { fg = colors.base00, bg = colors.base0A },
  IncSearch = { fg = colors.base01, bg = colors.base09 },
  LineNr = { fg = colors.base03 },
  CursorLineNr = { fg = colors.base0A },
  MatchParen = { fg = colors.base00, bg = colors.base03 },

  StatusLine = { fg = colors.base04, bg = colors.base02 },
  StatusLineNC = { fg = colors.base03, bg = colors.base01 },

  -- Messages
  ErrorMsg = { fg = colors.base08 },
  WarningMsg = { fg = colors.base09 },
  MoreMsg = { fg = colors.base0B },
  Question = { fg = colors.base0D },

  -- Diffs
  DiffAdd = { fg = colors.base0B, bg = colors.base00 },
  DiffChange = { fg = colors.base0A, bg = colors.base00 },
  DiffDelete = { fg = colors.base08, bg = colors.base00 },
  DiffText = { fg = colors.base0D, bg = colors.base00 },

  -- Spelling
  SpellBad = { undercurl = true, sp = colors.base08 },
  SpellCap = { undercurl = true, sp = colors.base0D },
  SpellLocal = { undercurl = true, sp = colors.base0C },
  SpellRare = { undercurl = true, sp = colors.base0E },
}

for group, opts in pairs(theme) do
  vim.api.nvim_set_hl(0, group, opts)
end

return colors`;

export const createBase24Json = (colors: Base24Colors, themeName: string): string =>
  JSON.stringify(
    {
      name: themeName,
      scheme: 'base24',
      author: 'Lumina Theme Generator',
      colors: colors,
    },
    null,
    2
  );

export const createThemeParams = (
  activeTheme: ThemeKey,
  flavor: FlavorKey,
  params: ThemeParams,
  colors: Base24Colors
): string => {
  // Create a mutable copy of the theme data with proper typing
  const themeData: Record<string, any> = {
    midnight: { ...RAW_THEME_DATA.midnight },
    twilight: { ...RAW_THEME_DATA.twilight },
    dawn: { ...RAW_THEME_DATA.dawn },
    noon: { ...RAW_THEME_DATA.noon },
  };

  // Update the active theme with current parameters
  const currentTheme = themeData[activeTheme];
  if (currentTheme) {
    // Update base theme parameters
    currentTheme.bgHue = params.bgHue;
    currentTheme.bgSat = params.bgSat;
    currentTheme.bgLight = params.bgLight;
    currentTheme.accentHue = params.accentHue;
    currentTheme.accentSat = params.accentSat;
    currentTheme.accentLight = params.accentLight;
    currentTheme.commentLight = params.commentLight;

    // Update flavor parameters
    if (currentTheme.flavors && currentTheme.flavors[flavor]) {
      currentTheme.flavors[flavor] = {
        accentHue: params.accentHue,
        accentSat: params.accentSat,
        accentLight: params.accentLight,
        commentLight: params.commentLight,
      };
    }
  }

  return JSON.stringify(themeData, null, 2);
};
