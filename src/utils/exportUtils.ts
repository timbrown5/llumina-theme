import { RAW_THEME_DATA } from '../constants/index.ts';
import type { Base24Colors, ThemeParams, ThemeKey, FlavorKey } from '../types/index.ts';

export const createNvimTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => `-- ${themeName} (${flavor} flavor)
-- Generated by Lumina Theme Generator

local colors = {
${Object.entries(colors)
  .map(([key, value]) => `  ${key} = "${value}",`)
  .join('\n')}
}

local theme = {
  Normal = { fg = colors.base05, bg = colors.base00 },
  NormalFloat = { fg = colors.base05, bg = colors.base01 },
  Comment = { fg = colors.base03, italic = true },

  -- Constants
  Constant = { fg = colors.base09 },
  String = { fg = colors.base0B },
  Character = { fg = colors.base0B },
  Number = { fg = colors.base09 },
  Boolean = { fg = colors.base09 },
  Float = { fg = colors.base09 },

  -- Identifiers
  Identifier = { fg = colors.base08 },
  Function = { fg = colors.base0D },

  -- Statements
  Statement = { fg = colors.base0E },
  Conditional = { fg = colors.base0E },
  Repeat = { fg = colors.base0E },
  Label = { fg = colors.base0A },
  Operator = { fg = colors.base05 },
  Keyword = { fg = colors.base0E, bold = true },
  Exception = { fg = colors.base08 },

  -- PreProcessor
  PreProc = { fg = colors.base0A },
  Include = { fg = colors.base0D },
  Define = { fg = colors.base0E },
  Macro = { fg = colors.base08 },
  PreCondit = { fg = colors.base0A },

  -- Types
  Type = { fg = colors.base0A },
  StorageClass = { fg = colors.base0A },
  Structure = { fg = colors.base0E },
  Typedef = { fg = colors.base0A },

  -- Special
  Special = { fg = colors.base0C },
  SpecialChar = { fg = colors.base0F },
  Tag = { fg = colors.base0A },
  Delimiter = { fg = colors.base0F },
  SpecialComment = { fg = colors.base0C },
  Debug = { fg = colors.base08 },

  -- UI Elements
  CursorLine = { bg = colors.base01 },
  CursorColumn = { bg = colors.base01 },
  ColorColumn = { bg = colors.base01 },
  Visual = { bg = colors.base02 },
  VisualNOS = { bg = colors.base02 },
  Search = { fg = colors.base00, bg = colors.base0A },
  IncSearch = { fg = colors.base01, bg = colors.base09 },
  LineNr = { fg = colors.base03 },
  CursorLineNr = { fg = colors.base0A },
  MatchParen = { fg = colors.base00, bg = colors.base03 },

  StatusLine = { fg = colors.base04, bg = colors.base02 },
  StatusLineNC = { fg = colors.base03, bg = colors.base01 },

  -- Messages
  ErrorMsg = { fg = colors.base08 },
  WarningMsg = { fg = colors.base09 },
  MoreMsg = { fg = colors.base0B },
  Question = { fg = colors.base0D },

  -- Diffs
  DiffAdd = { fg = colors.base0B, bg = colors.base00 },
  DiffChange = { fg = colors.base0A, bg = colors.base00 },
  DiffDelete = { fg = colors.base08, bg = colors.base00 },
  DiffText = { fg = colors.base0D, bg = colors.base00 },

  -- Spelling
  SpellBad = { undercurl = true, sp = colors.base08 },
  SpellCap = { undercurl = true, sp = colors.base0D },
  SpellLocal = { undercurl = true, sp = colors.base0C },
  SpellRare = { undercurl = true, sp = colors.base0E },
}

for group, opts in pairs(theme) do
  vim.api.nvim_set_hl(0, group, opts)
end

return colors`;

export const createBase24Json = (colors: Base24Colors, themeName: string): string =>
  JSON.stringify(
    {
      name: themeName,
      scheme: 'base24',
      author: 'Lumina Theme Generator',
      colors: colors,
    },
    null,
    2
  );

export const createStylixTheme = (
  colors: Base24Colors,
  themeName: string,
  flavor: FlavorKey
): string => {
  // Clean theme name for Nix attribute
  const nixThemeName = themeName.toLowerCase().replace(/[^a-z0-9]/g, '-');

  return `# ${themeName} (${flavor} flavor) - Stylix Theme
# Generated by Lumina Theme Generator
# Add this to your Nix configuration

{
  stylix = {
    enable = true;

    # Base24 color scheme
    base16Scheme = {
      base00 = "${colors.base00.slice(1)}"; # Background
      base01 = "${colors.base01.slice(1)}"; # Alt Background
      base02 = "${colors.base02.slice(1)}"; # Selection
      base03 = "${colors.base03.slice(1)}"; # Comments
      base04 = "${colors.base04.slice(1)}"; # Dark Foreground
      base05 = "${colors.base05.slice(1)}"; # Foreground
      base06 = "${colors.base06.slice(1)}"; # Light Foreground
      base07 = "${colors.base07.slice(1)}"; # Light Background
      base08 = "${colors.base08.slice(1)}"; # Red
      base09 = "${colors.base09.slice(1)}"; # Orange
      base0A = "${colors.base0A.slice(1)}"; # Yellow
      base0B = "${colors.base0B.slice(1)}"; # Green
      base0C = "${colors.base0C.slice(1)}"; # Cyan
      base0D = "${colors.base0D.slice(1)}"; # Blue
      base0E = "${colors.base0E.slice(1)}"; # Purple
      base0F = "${colors.base0F.slice(1)}"; # Pink

      # Extended Base24 colors (muted variants)
      base10 = "${colors.base10.slice(1)}"; # Muted Red
      base11 = "${colors.base11.slice(1)}"; # Muted Orange
      base12 = "${colors.base12.slice(1)}"; # Muted Yellow
      base13 = "${colors.base13.slice(1)}"; # Muted Green
      base14 = "${colors.base14.slice(1)}"; # Muted Cyan
      base15 = "${colors.base15.slice(1)}"; # Muted Blue
      base16 = "${colors.base16.slice(1)}"; # Muted Purple
      base17 = "${colors.base17.slice(1)}"; # Muted Pink

      scheme = "${nixThemeName}";
      author = "Lumina Theme Generator";
    };

    # Optional: Set polarity (dark/light theme)
    polarity = "${colors.base00 < colors.base05 ? 'dark' : 'light'}";

    # Example font configuration (customize as needed)
    fonts = {
      monospace = {
        package = pkgs.jetbrains-mono;
        name = "JetBrains Mono";
      };
      sansSerif = {
        package = pkgs.inter;
        name = "Inter";
      };
      serif = {
        package = pkgs.libertinus;
        name = "Libertinus Serif";
      };

      sizes = {
        applications = 11;
        terminal = 12;
        desktop = 10;
        popups = 10;
      };
    };

    # Optional: Image for background/wallpaper
    # image = ./path/to/your/wallpaper.jpg;

    # Targets to theme (uncomment what you want)
    targets = {
      # Terminal emulators
      alacritty.enable = true;
      kitty.enable = true;
      foot.enable = true;

      # Desktop environments
      gnome.enable = true;
      gtk.enable = true;

      # Window managers
      hyprland.enable = true;
      sway.enable = true;

      # Editors
      neovim.enable = true;
      vim.enable = true;

      # Browsers
      firefox.enable = true;

      # Other applications
      fzf.enable = true;
      tmux.enable = true;
      zellij.enable = true;
    };
  };
}

# Alternative: If you prefer to define the scheme separately
# Add this to a separate file like themes/${nixThemeName}.nix:
#
# {
#   scheme = "${nixThemeName}";
#   author = "Lumina Theme Generator";
#   base00 = "${colors.base00.slice(1)}";
#   base01 = "${colors.base01.slice(1)}";
#   # ... (rest of colors)
# }
#
# Then import it in your configuration:
# stylix.base16Scheme = import ./themes/${nixThemeName}.nix;`;
};

export const createThemeParams = (
  activeTheme: ThemeKey,
  flavor: FlavorKey,
  params: ThemeParams,
  colors: Base24Colors
): string => {
  // Create a mutable copy of the theme data
  const themeData = {
    midnight: JSON.parse(JSON.stringify(RAW_THEME_DATA.midnight)),
    twilight: JSON.parse(JSON.stringify(RAW_THEME_DATA.twilight)),
    dawn: JSON.parse(JSON.stringify(RAW_THEME_DATA.dawn)),
    noon: JSON.parse(JSON.stringify(RAW_THEME_DATA.noon)),
  };

  // Update the active theme with current parameters
  const currentTheme = themeData[activeTheme];
  if (currentTheme) {
    // Update base theme parameters
    currentTheme.bgHue = params.bgHue;
    currentTheme.bgSat = params.bgSat;
    currentTheme.bgLight = params.bgLight;
    currentTheme.accentHue = params.accentHue;
    currentTheme.accentSat = params.accentSat;
    currentTheme.accentLight = params.accentLight;
    currentTheme.commentLight = params.commentLight;

    // Update flavor parameters
    if (currentTheme.flavors && currentTheme.flavors[flavor]) {
      currentTheme.flavors[flavor] = {
        accentHue: params.accentHue,
        accentSat: params.accentSat,
        accentLight: params.accentLight,
        commentLight: params.commentLight,
      };
    }
  }

  // Return the complete themeData variable declaration
  return `// Theme data - you can update this object directly or copy/paste from exported JSON
const themeData = ${JSON.stringify(themeData, null, 2)} as const;`;
};
